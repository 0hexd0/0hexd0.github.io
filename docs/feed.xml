<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-06-03T12:55:06+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">何码</title><subtitle>人生如逆旅，我亦是行人</subtitle><entry><title type="html">test 1</title><link href="http://localhost:4000/test/2023/11/21/test1.html" rel="alternate" type="text/html" title="test 1" /><published>2023-11-21T19:47:08+08:00</published><updated>2023-11-21T19:47:08+08:00</updated><id>http://localhost:4000/test/2023/11/21/test1</id><content type="html" xml:base="http://localhost:4000/test/2023/11/21/test1.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

\[R_{\mu \nu} - {1 \over 2}g_{\mu \nu}\,R + g_{\mu \nu} \Lambda
= {8 \pi G \over c^4} T_{\mu \nu}\]

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight">
  <pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre>
</figure>

<figure class="highlight">
  <pre><code class="language-javascript" data-lang="javascript"><span class="kd">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span></code></pre>
</figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>

<pre class="mermaid">
graph TD;
    A--&gt;B;
    A--&gt;C;
    B--&gt;D;
    C--&gt;D;
</pre>

<p>测试修改</p>]]></content><author><name></name></author><category term="test" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry><entry><title type="html">test 2</title><link href="http://localhost:4000/test/2023/11/21/test2.html" rel="alternate" type="text/html" title="test 2" /><published>2023-11-21T19:47:08+08:00</published><updated>2023-11-21T19:47:08+08:00</updated><id>http://localhost:4000/test/2023/11/21/test2</id><content type="html" xml:base="http://localhost:4000/test/2023/11/21/test2.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

\[R_{\mu \nu} - {1 \over 2}g_{\mu \nu}\,R + g_{\mu \nu} \Lambda
= {8 \pi G \over c^4} T_{\mu \nu}\]

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight">
  <pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre>
</figure>

<figure class="highlight">
  <pre><code class="language-javascript" data-lang="javascript"><span class="kd">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span></code></pre>
</figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>

<pre class="mermaid">
flowchart LR
Start --&gt; Stop
</pre>
<pre class="mermaid">
flowchart LR
Start --&gt; Stop
</pre>]]></content><author><name></name></author><category term="test" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry><entry><title type="html">test 3</title><link href="http://localhost:4000/test/2023/11/21/test3.html" rel="alternate" type="text/html" title="test 3" /><published>2023-11-21T19:47:08+08:00</published><updated>2023-11-21T19:47:08+08:00</updated><id>http://localhost:4000/test/2023/11/21/test3</id><content type="html" xml:base="http://localhost:4000/test/2023/11/21/test3.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

\[R_{\mu \nu} - {1 \over 2}g_{\mu \nu}\,R + g_{\mu \nu} \Lambda
= {8 \pi G \over c^4} T_{\mu \nu}\]

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight">
  <pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre>
</figure>

<figure class="highlight">
  <pre><code class="language-javascript" data-lang="javascript"><span class="kd">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span></code></pre>
</figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>

<pre class="mermaid">
graph TD;
    A--&gt;B;
    A--&gt;C;
    B--&gt;D;
    C--&gt;D;
</pre>]]></content><author><name></name></author><category term="test" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry><entry><title type="html">test 4</title><link href="http://localhost:4000/test/2023/11/21/test4.html" rel="alternate" type="text/html" title="test 4" /><published>2023-11-21T19:47:08+08:00</published><updated>2023-11-21T19:47:08+08:00</updated><id>http://localhost:4000/test/2023/11/21/test4</id><content type="html" xml:base="http://localhost:4000/test/2023/11/21/test4.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

\[R_{\mu \nu} - {1 \over 2}g_{\mu \nu}\,R + g_{\mu \nu} \Lambda
= {8 \pi G \over c^4} T_{\mu \nu}\]

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span>
</code></pre></div></div>

<p>Check out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk].</p>

<pre class="mermaid">
graph TD;
    A--&gt;B;
    A--&gt;C;
    B--&gt;D;
    C--&gt;D;
</pre>

<pre class="mermaid">
gantt
        dateFormat  YYYY-MM-DD
        title       Adding GANTT diagram functionality to mermaid
        excludes    weekends
    
        section A section
        Completed task            :done,    des1, 2014-01-06,2014-01-08
        Active task               :active,  des2, 2014-01-09, 3d
        Future task               :         des3, after des2, 5d
        Future task2              :         des4, after des3, 5d
    
        section Critical tasks
        Completed task in the critical line :crit, done, 2014-01-06,24h
        Implement parser and jison          :crit, done, after des1, 2d
        Create tests for parser             :crit, active, 3d
        Future task in critical line        :crit, 5d
        Create tests for renderer           :2d
        Add to mermaid                      :1d
        Functionality added                 :milestone, 2014-01-25, 0d
    
        section Documentation
        Describe gantt syntax               :active, a1, after des1, 3d
        Add gantt diagram to demo page      :after a1  , 20h
        Add another diagram to demo page    :doc1, after a1  , 48h
    
        section Last section
        Describe gantt syntax               :after doc1, 3d
        Add gantt diagram to demo page      :20h
        Add another diagram to demo page    :48h

</pre>

<pre class="mermaid">
classDiagram
        Animal &lt;|-- Duck
        Animal &lt;|-- Fish
        Animal &lt;|-- Zebra
        Animal : +int age
        Animal : +String gender
        Animal: +isMammal()
        Animal: +mate()
        class Duck{
            +String beakColor
            +swim()
            +quack()
        }
        class Fish{
            -int sizeInFeet
            -canEat()
        }
        class Zebra{
            +bool is_wild
            +run()
        }


</pre>]]></content><author><name></name></author><category term="test" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry><entry><title type="html">三个栈实现双向队列</title><link href="http://localhost:4000/algorithms/2023/11/21/three-stack-deque.html" rel="alternate" type="text/html" title="三个栈实现双向队列" /><published>2023-11-21T00:00:00+08:00</published><updated>2023-11-21T00:00:00+08:00</updated><id>http://localhost:4000/algorithms/2023/11/21/three-stack-deque</id><content type="html" xml:base="http://localhost:4000/algorithms/2023/11/21/three-stack-deque.html"><![CDATA[<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">edu.princeton.cs.algs4.Stack</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.NoSuchElementException</span><span class="o">;</span>

<span class="c1">// 两个栈实现双向队列</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreeStackDeque</span><span class="o">&lt;</span><span class="nc">Item</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Item</span><span class="o">&gt;</span> <span class="n">leftStack</span><span class="o">;</span> <span class="c1">// 基本栈</span>
    <span class="kd">private</span> <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Item</span><span class="o">&gt;</span> <span class="n">rightStack</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Item</span><span class="o">&gt;</span> <span class="n">tempStack</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ThreeStackDeque</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">leftStack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
        <span class="n">rightStack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
        <span class="n">tempStack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
    <span class="o">}</span>

    <span class="kt">boolean</span> <span class="nf">isEmpty</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">leftStack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">rightStack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kt">int</span> <span class="nf">size</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">leftStack</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">+</span> <span class="n">rightStack</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">pushLeft</span><span class="o">(</span><span class="nc">Item</span> <span class="n">item</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">leftStack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">item</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">// stack1 =&gt; stack2</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">transfer</span><span class="o">(</span><span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Item</span><span class="o">&gt;</span> <span class="n">s1</span><span class="o">,</span> <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Item</span><span class="o">&gt;</span> <span class="n">s2</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">while</span> <span class="o">(!</span><span class="n">s1</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">s2</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">s1</span><span class="o">.</span><span class="na">pop</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="nc">Item</span> <span class="nf">popLeft</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">NoSuchElementException</span><span class="o">(</span><span class="s">"Deque underflow"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">leftStack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">transfer</span><span class="o">(</span><span class="n">rightStack</span><span class="o">,</span> <span class="n">leftStack</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">leftStack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">pushRight</span><span class="o">(</span><span class="nc">Item</span> <span class="n">item</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">rightStack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">item</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nc">Item</span> <span class="nf">popRight</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">NoSuchElementException</span><span class="o">(</span><span class="s">"Deque underflow"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">rightStack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">transfer</span><span class="o">(</span><span class="n">leftStack</span><span class="o">,</span> <span class="n">rightStack</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">rightStack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ThreeStackDeque</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">deque</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ThreeStackDeque</span><span class="o">&lt;&gt;();</span>

        <span class="c1">// Push elements</span>
        <span class="n">deque</span><span class="o">.</span><span class="na">pushLeft</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="n">deque</span><span class="o">.</span><span class="na">pushLeft</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
        <span class="n">deque</span><span class="o">.</span><span class="na">pushRight</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
        <span class="n">deque</span><span class="o">.</span><span class="na">pushRight</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Pop Left result: "</span> <span class="o">+</span> <span class="n">deque</span><span class="o">.</span><span class="na">popLeft</span><span class="o">());</span> <span class="c1">// 期望输出 2</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Pop Left result: "</span> <span class="o">+</span> <span class="n">deque</span><span class="o">.</span><span class="na">popLeft</span><span class="o">());</span> <span class="c1">// 期望输出 1</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Pop Left result: "</span> <span class="o">+</span> <span class="n">deque</span><span class="o">.</span><span class="na">popLeft</span><span class="o">());</span> <span class="c1">// 期望输出 4</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Pop Left result: "</span> <span class="o">+</span> <span class="n">deque</span><span class="o">.</span><span class="na">popLeft</span><span class="o">());</span> <span class="c1">// 期望输出 3</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<figure class="highlight">
  <pre><code class="language-java" data-lang="java"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">edu.princeton.cs.algs4.Stack</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.NoSuchElementException</span><span class="o">;</span>

<span class="c1">// 两个栈实现双向队列</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreeStackDeque</span><span class="o">&lt;</span><span class="nc">Item</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Item</span><span class="o">&gt;</span> <span class="n">leftStack</span><span class="o">;</span> <span class="c1">// 基本栈</span>
    <span class="kd">private</span> <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Item</span><span class="o">&gt;</span> <span class="n">rightStack</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Item</span><span class="o">&gt;</span> <span class="n">tempStack</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ThreeStackDeque</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">leftStack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
        <span class="n">rightStack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
        <span class="n">tempStack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
    <span class="o">}</span>

    <span class="kt">boolean</span> <span class="nf">isEmpty</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">leftStack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">rightStack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kt">int</span> <span class="nf">size</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">leftStack</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">+</span> <span class="n">rightStack</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">pushLeft</span><span class="o">(</span><span class="nc">Item</span> <span class="n">item</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">leftStack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">item</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">// stack1 =&gt; stack2</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">transfer</span><span class="o">(</span><span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Item</span><span class="o">&gt;</span> <span class="n">s1</span><span class="o">,</span> <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Item</span><span class="o">&gt;</span> <span class="n">s2</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">while</span> <span class="o">(!</span><span class="n">s1</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">s2</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">s1</span><span class="o">.</span><span class="na">pop</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="nc">Item</span> <span class="nf">popLeft</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">NoSuchElementException</span><span class="o">(</span><span class="s">"Deque underflow"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">leftStack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">transfer</span><span class="o">(</span><span class="n">rightStack</span><span class="o">,</span> <span class="n">leftStack</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">leftStack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">pushRight</span><span class="o">(</span><span class="nc">Item</span> <span class="n">item</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">rightStack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">item</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nc">Item</span> <span class="nf">popRight</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">NoSuchElementException</span><span class="o">(</span><span class="s">"Deque underflow"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">rightStack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">transfer</span><span class="o">(</span><span class="n">leftStack</span><span class="o">,</span> <span class="n">rightStack</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">rightStack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ThreeStackDeque</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">deque</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ThreeStackDeque</span><span class="o">&lt;&gt;();</span>

        <span class="c1">// Push elements</span>
        <span class="n">deque</span><span class="o">.</span><span class="na">pushLeft</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="n">deque</span><span class="o">.</span><span class="na">pushLeft</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
        <span class="n">deque</span><span class="o">.</span><span class="na">pushRight</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
        <span class="n">deque</span><span class="o">.</span><span class="na">pushRight</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Pop Left result: "</span> <span class="o">+</span> <span class="n">deque</span><span class="o">.</span><span class="na">popLeft</span><span class="o">());</span> <span class="c1">// 期望输出 2</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Pop Left result: "</span> <span class="o">+</span> <span class="n">deque</span><span class="o">.</span><span class="na">popLeft</span><span class="o">());</span> <span class="c1">// 期望输出 1</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Pop Left result: "</span> <span class="o">+</span> <span class="n">deque</span><span class="o">.</span><span class="na">popLeft</span><span class="o">());</span> <span class="c1">// 期望输出 4</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Pop Left result: "</span> <span class="o">+</span> <span class="n">deque</span><span class="o">.</span><span class="na">popLeft</span><span class="o">());</span> <span class="c1">// 期望输出 3</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre>
</figure>]]></content><author><name></name></author><category term="algorithms" /><summary type="html"><![CDATA[``` java import edu.princeton.cs.algs4.Stack;]]></summary></entry></feed>